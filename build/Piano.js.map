{"version":3,"file":"Piano.js","mappings":"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","sources":["webpack://Tone/webpack/universalModuleDefinition","webpack://Tone/external umd \"tone\"","webpack://Tone/webpack/bootstrap","webpack://Tone/webpack/runtime/define property getters","webpack://Tone/webpack/runtime/hasOwnProperty shorthand","webpack://Tone/webpack/runtime/make namespace object","webpack://Tone/./src/piano/Component.ts","webpack://Tone/./src/piano/Util.ts","webpack://Tone/./src/piano/Salamander.ts","webpack://Tone/./src/piano/Harmonics.ts","webpack://Tone/./src/piano/Keybed.ts","webpack://Tone/./src/piano/Pedal.ts","webpack://Tone/./src/piano/String.ts","webpack://Tone/./src/piano/Strings.ts","webpack://Tone/./src/piano/Piano.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"tone\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"tone\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Tone\"] = factory(require(\"tone\"));\n\telse\n\t\troot[\"Tone\"] = factory(root[\"tone\"]);\n})(self, (__WEBPACK_EXTERNAL_MODULE__583__) => {\nreturn ","module.exports = __WEBPACK_EXTERNAL_MODULE__583__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ToneAudioNode, Volume } from 'tone';\n/**\n * Base class for the other components\n */\nexport class PianoComponent extends ToneAudioNode {\n    constructor(options) {\n        super(options);\n        this.name = 'PianoComponent';\n        this.input = undefined;\n        this.output = new Volume({ context: this.context });\n        /**\n         * If the component is enabled or not\n         */\n        this._enabled = false;\n        /**\n         * The volume output of the component\n         */\n        this.volume = this.output.volume;\n        /**\n         * Boolean indication of if the component is loaded or not\n         */\n        this._loaded = false;\n        this.volume.value = options.volume;\n        this._enabled = options.enabled;\n        this.samples = options.samples;\n    }\n    /**\n     * If the samples are loaded or not\n     */\n    get loaded() {\n        return this._loaded;\n    }\n    /**\n     * Load the samples\n     */\n    load() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._enabled) {\n                yield this._internalLoad();\n                this._loaded = true;\n            }\n            else {\n                return Promise.resolve();\n            }\n        });\n    }\n}\n","// import * as Tone from '../node_modules/tone/Tone'\nimport { Frequency, intervalToFrequencyRatio, ToneBufferSource } from 'tone';\nexport function noteToMidi(note) {\n    return Frequency(note).toMidi();\n}\nexport function midiToNote(midi) {\n    const frequency = Frequency(midi, 'midi');\n    const ret = frequency.toNote();\n    return ret;\n}\nfunction midiToFrequencyRatio(midi) {\n    const mod = midi % 3;\n    if (mod === 1) {\n        return [midi - 1, intervalToFrequencyRatio(1)];\n    }\n    else if (mod === 2) {\n        // @ts-ignore\n        return [midi + 1, intervalToFrequencyRatio(-1)];\n    }\n    else {\n        return [midi, 1];\n    }\n}\nfunction createSource(buffer) {\n    return new ToneBufferSource(buffer);\n}\nexport function randomBetween(low, high) {\n    return Math.random() * (high - low) + low;\n}\n","import { midiToNote } from './Util';\nexport const githubURL = 'https://tambien.github.io/Piano/Salamander/';\nexport function getReleasesUrl(midi) {\n    return `rel${midi - 20}.[mp3|ogg]`;\n}\nexport function getHarmonicsUrl(midi) {\n    return `harmS${midiToNote(midi).replace('#', 's')}.[mp3|ogg]`;\n}\nexport function getNotesUrl(midi, vel) {\n    return `${midiToNote(midi).replace('#', 's')}v${vel}.[mp3|ogg]`;\n}\n/**\n * Maps velocity depths to Salamander velocities\n */\nexport const velocitiesMap = {\n    1: [8],\n    2: [6, 12],\n    3: [1, 7, 15],\n    4: [1, 5, 10, 15],\n    5: [1, 4, 8, 12, 16],\n    6: [1, 3, 7, 10, 13, 16],\n    7: [1, 3, 6, 9, 11, 13, 16],\n    8: [1, 3, 5, 7, 9, 11, 13, 16],\n    9: [1, 3, 5, 7, 9, 11, 13, 15, 16],\n    10: [1, 2, 3, 5, 7, 9, 11, 13, 15, 16],\n    11: [1, 2, 3, 5, 7, 9, 11, 13, 14, 15, 16],\n    12: [1, 2, 3, 4, 5, 7, 9, 11, 13, 14, 15, 16],\n    13: [1, 2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16],\n    14: [1, 2, 3, 4, 5, 6, 7, 9, 11, 12, 13, 14, 15, 16],\n    15: [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16],\n    16: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],\n};\n/**\n * All the notes of audio samples\n */\nexport const allNotes = [\n    21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54,\n    57, 60, 63, 66, 69, 72, 75, 78, 81, 84,\n    87, 90, 93, 96, 99, 102, 105, 108\n];\nexport function getNotesInRange(min, max) {\n    return allNotes.filter(note => min <= note && note <= max);\n}\n/**\n * All the notes of audio samples\n */\nconst harmonics = [21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63, 66, 69, 72, 75, 78, 81, 84, 87];\nexport function getHarmonicsInRange(min, max) {\n    return harmonics.filter(note => min <= note && note <= max);\n}\nexport function inHarmonicsRange(note) {\n    return harmonics[0] <= note && note <= harmonics[harmonics.length - 1];\n}\n","import { Midi, Sampler } from 'tone';\nimport { PianoComponent } from './Component';\nimport { getHarmonicsInRange, getHarmonicsUrl, inHarmonicsRange } from './Salamander';\nimport { randomBetween } from './Util';\nexport class Harmonics extends PianoComponent {\n    constructor(options) {\n        super(options);\n        this._urls = {};\n        const notes = getHarmonicsInRange(options.minNote, options.maxNote);\n        for (const n of notes) {\n            this._urls[n] = getHarmonicsUrl(n);\n        }\n    }\n    triggerAttack(note, time, velocity) {\n        if (this._enabled && inHarmonicsRange(note)) {\n            this._sampler.triggerAttack(Midi(note).toNote(), time, velocity * randomBetween(0.5, 1));\n        }\n    }\n    _internalLoad() {\n        return new Promise(onload => {\n            this._sampler = new Sampler({\n                baseUrl: this.samples,\n                onload,\n                urls: this._urls,\n            }).connect(this.output);\n        });\n    }\n}\n","import { ToneAudioBuffers, ToneBufferSource } from 'tone';\nimport { PianoComponent } from './Component';\nimport { getReleasesUrl } from './Salamander';\nimport { randomBetween } from './Util';\nexport class Keybed extends PianoComponent {\n    constructor(options) {\n        super(options);\n        /**\n         * The urls to load\n         */\n        this._urls = {};\n        for (let i = options.minNote; i <= options.maxNote; i++) {\n            this._urls[i] = getReleasesUrl(i);\n        }\n    }\n    _internalLoad() {\n        return new Promise(success => {\n            this._buffers = new ToneAudioBuffers(this._urls, success, this.samples);\n        });\n    }\n    start(note, time, velocity) {\n        if (this._enabled && this._buffers.has(note)) {\n            const source = new ToneBufferSource({\n                url: this._buffers.get(note),\n                context: this.context,\n            }).connect(this.output);\n            // randomize the velocity slightly\n            source.start(time, 0, undefined, 0.015 * velocity * randomBetween(0.5, 1));\n        }\n    }\n}\n","import { ToneAudioBuffers, ToneBufferSource } from 'tone';\nimport { PianoComponent } from './Component';\nimport { randomBetween } from './Util';\nexport class Pedal extends PianoComponent {\n    constructor(options) {\n        super(options);\n        this._downTime = Infinity;\n        this._currentSound = null;\n        this._downTime = Infinity;\n    }\n    _internalLoad() {\n        return new Promise((success) => {\n            this._buffers = new ToneAudioBuffers({\n                down1: 'pedalD1.mp3',\n                down2: 'pedalD2.mp3',\n                up1: 'pedalU1.mp3',\n                up2: 'pedalU2.mp3',\n            }, success, this.samples);\n        });\n    }\n    /**\n     *  Squash the current playing sound\n     */\n    _squash(time) {\n        if (this._currentSound && this._currentSound.state !== 'stopped') {\n            this._currentSound.stop(time);\n        }\n        this._currentSound = null;\n    }\n    _playSample(time, dir) {\n        if (this._enabled) {\n            this._currentSound = new ToneBufferSource({\n                url: this._buffers.get(`${dir}${Math.random() > 0.5 ? 1 : 2}`),\n                context: this.context,\n                curve: 'exponential',\n                fadeIn: 0.05,\n                fadeOut: 0.1,\n            }).connect(this.output);\n            this._currentSound.start(time, randomBetween(0, 0.01), undefined, 0.1 * randomBetween(0.5, 1));\n        }\n    }\n    /**\n     * Put the pedal down\n     */\n    down(time) {\n        this._squash(time);\n        this._downTime = time;\n        this._playSample(time, 'down');\n    }\n    /**\n     * Put the pedal up\n     */\n    up(time) {\n        this._squash(time);\n        this._downTime = Infinity;\n        this._playSample(time, 'up');\n    }\n    /**\n     * Indicates if the pedal is down at the given time\n     */\n    isDown(time) {\n        return time > this._downTime;\n    }\n}\n","import { Sampler, ToneAudioNode } from 'tone';\nimport { getNotesUrl } from './Salamander';\n/**\n * A single velocity of strings\n */\nexport class PianoString extends ToneAudioNode {\n    constructor(options) {\n        super(options);\n        this.name = 'PianoString';\n        this._urls = {};\n        // create the urls\n        options.notes.forEach(note => this._urls[note] = getNotesUrl(note, options.velocity));\n        this.samples = options.samples;\n    }\n    load() {\n        return new Promise(onload => {\n            this._sampler = this.output = new Sampler({\n                attack: 0,\n                baseUrl: this.samples,\n                curve: 'exponential',\n                onload,\n                release: 0.4,\n                urls: this._urls,\n                volume: 3,\n            });\n        });\n    }\n    triggerAttack(note, time, velocity) {\n        this._sampler.triggerAttack(note, time, velocity);\n    }\n    triggerRelease(note, time) {\n        this._sampler.triggerRelease(note, time);\n    }\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Midi } from 'tone';\nimport { PianoComponent } from './Component';\nimport { getNotesInRange, velocitiesMap } from './Salamander';\nimport { PianoString } from './String';\n/**\n *  Manages all of the hammered string sounds\n */\nexport class PianoStrings extends PianoComponent {\n    constructor(options) {\n        super(options);\n        const notes = getNotesInRange(options.minNote, options.maxNote);\n        const velocities = velocitiesMap[options.velocities].slice();\n        this._strings = velocities.map(velocity => {\n            const string = new PianoString(Object.assign(options, {\n                notes, velocity,\n            }));\n            return string;\n        });\n        this._activeNotes = new Map();\n    }\n    /**\n     * Scale a value between a given range\n     */\n    scale(val, inMin, inMax, outMin, outMax) {\n        return ((val - inMin) / (inMax - inMin)) * (outMax - outMin) + outMin;\n    }\n    triggerAttack(note, time, velocity) {\n        const scaledVel = this.scale(velocity, 0, 1, -0.5, this._strings.length - 0.51);\n        const stringIndex = Math.max(Math.round(scaledVel), 0);\n        let gain = 1 + scaledVel - stringIndex;\n        if (this._strings.length === 1) {\n            gain = velocity;\n        }\n        const sampler = this._strings[stringIndex];\n        if (this._activeNotes.has(note)) {\n            this.triggerRelease(note, time);\n        }\n        this._activeNotes.set(note, sampler);\n        sampler.triggerAttack(Midi(note).toNote(), time, gain);\n    }\n    triggerRelease(note, time) {\n        // trigger the release of all of the notes at that velociy\n        if (this._activeNotes.has(note)) {\n            this._activeNotes.get(note).triggerRelease(Midi(note).toNote(), time);\n            this._activeNotes.delete(note);\n        }\n    }\n    _internalLoad() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield Promise.all(this._strings.map((s) => __awaiter(this, void 0, void 0, function* () {\n                yield s.load();\n                s.connect(this.output);\n            })));\n        });\n    }\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Gain, isString, Midi, optionsFromArguments, ToneAudioNode } from 'tone';\nimport { Harmonics } from './Harmonics';\nimport { Keybed } from './Keybed';\nimport { Pedal } from './Pedal';\nimport { PianoStrings } from './Strings';\n/**\n *  The Piano\n */\nexport class Piano extends ToneAudioNode {\n    constructor() {\n        super(optionsFromArguments(Piano.getDefaults(), arguments));\n        this.name = 'Piano';\n        this.input = undefined;\n        this.output = new Gain({ context: this.context });\n        /**\n         * The currently held notes\n         */\n        this._heldNotes = new Map();\n        /**\n         * If it's loaded or not\n         */\n        this._loaded = false;\n        const options = optionsFromArguments(Piano.getDefaults(), arguments);\n        // make sure it ends with a /\n        if (!options.url.endsWith('/')) {\n            options.url += '/';\n        }\n        this.maxPolyphony = options.maxPolyphony;\n        this._heldNotes = new Map();\n        this._sustainedNotes = new Map();\n        this._strings = new PianoStrings(Object.assign({}, options, {\n            enabled: true,\n            samples: options.url,\n            volume: options.volume.strings,\n        })).connect(this.output);\n        this.strings = this._strings.volume;\n        this._pedal = new Pedal(Object.assign({}, options, {\n            enabled: options.pedal,\n            samples: options.url,\n            volume: options.volume.pedal,\n        })).connect(this.output);\n        this.pedal = this._pedal.volume;\n        this._keybed = new Keybed(Object.assign({}, options, {\n            enabled: options.release,\n            samples: options.url,\n            volume: options.volume.keybed,\n        })).connect(this.output);\n        this.keybed = this._keybed.volume;\n        this._harmonics = new Harmonics(Object.assign({}, options, {\n            enabled: options.release,\n            samples: options.url,\n            volume: options.volume.harmonics,\n        })).connect(this.output);\n        this.harmonics = this._harmonics.volume;\n    }\n    static getDefaults() {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            maxNote: 108,\n            minNote: 21,\n            pedal: true,\n            release: false,\n            url: 'https://tambien.github.io/Piano/audio/',\n            velocities: 1,\n            maxPolyphony: 32,\n            volume: {\n                harmonics: 0,\n                keybed: 0,\n                pedal: 0,\n                strings: 0,\n            },\n        });\n    }\n    /**\n     *  Load all the samples\n     */\n    load() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield Promise.all([\n                this._strings.load(),\n                this._pedal.load(),\n                this._keybed.load(),\n                this._harmonics.load(),\n            ]);\n            this._loaded = true;\n        });\n    }\n    /**\n     * If all the samples are loaded or not\n     */\n    get loaded() {\n        return this._loaded;\n    }\n    /**\n     *  Put the pedal down at the given time. Causes subsequent\n     *  notes and currently held notes to sustain.\n     */\n    pedalDown({ time = this.immediate() } = {}) {\n        if (this.loaded) {\n            time = this.toSeconds(time);\n            if (!this._pedal.isDown(time)) {\n                this._pedal.down(time);\n            }\n        }\n        return this;\n    }\n    /**\n     *  Put the pedal up. Dampens sustained notes\n     */\n    pedalUp({ time = this.immediate() } = {}) {\n        if (this.loaded) {\n            const seconds = this.toSeconds(time);\n            if (this._pedal.isDown(seconds)) {\n                this._pedal.up(seconds);\n                // dampen each of the notes\n                this._sustainedNotes.forEach((t, note) => {\n                    if (!this._heldNotes.has(note)) {\n                        this._strings.triggerRelease(note, seconds);\n                    }\n                });\n                this._sustainedNotes.clear();\n            }\n        }\n        return this;\n    }\n    /**\n     *  Play a note.\n     *  @param note\t  The note to play. If it is a number, it is assumed to be MIDI\n     *  @param velocity  The velocity to play the note\n     *  @param time\t  The time of the event\n     */\n    keyDown({ note, midi, time = this.immediate(), velocity = 0.8 }) {\n        if (this.loaded && this.maxPolyphony > this._heldNotes.size + this._sustainedNotes.size) {\n            time = this.toSeconds(time);\n            if (isString(note)) {\n                midi = Math.round(Midi(note).toMidi());\n            }\n            if (!this._heldNotes.has(midi)) {\n                // record the start time and velocity\n                this._heldNotes.set(midi, { time, velocity });\n                this._strings.triggerAttack(midi, time, velocity);\n            }\n        }\n        else {\n            console.warn('samples not loaded');\n        }\n        return this;\n    }\n    /**\n     *  Release a held note.\n     */\n    keyUp({ note, midi, time = this.immediate(), velocity = 0.8 }) {\n        if (this.loaded) {\n            time = this.toSeconds(time);\n            if (isString(note)) {\n                midi = Math.round(Midi(note).toMidi());\n            }\n            if (this._heldNotes.has(midi)) {\n                const prevNote = this._heldNotes.get(midi);\n                this._heldNotes.delete(midi);\n                // compute the release velocity\n                const holdTime = Math.pow(Math.max(time - prevNote.time, 0.1), 0.7);\n                const prevVel = prevNote.velocity;\n                let dampenGain = (3 / holdTime) * prevVel * velocity;\n                dampenGain = Math.max(dampenGain, 0.4);\n                dampenGain = Math.min(dampenGain, 4);\n                if (this._pedal.isDown(time)) {\n                    if (!this._sustainedNotes.has(midi)) {\n                        this._sustainedNotes.set(midi, time);\n                    }\n                }\n                else {\n                    // release the string sound\n                    this._strings.triggerRelease(midi, time);\n                    // trigger the harmonics sound\n                    this._harmonics.triggerAttack(midi, time, dampenGain);\n                }\n                // trigger the keybed release sound\n                this._keybed.start(midi, time, velocity);\n            }\n        }\n        return this;\n    }\n    stopAll() {\n        this.pedalUp();\n        this._heldNotes.forEach((_, midi) => {\n            this.keyUp({ midi });\n        });\n        return this;\n    }\n}\n"],"names":["root","factory","exports","module","require","define","amd","self","__WEBPACK_EXTERNAL_MODULE__583__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","PianoComponent","ToneAudioNode","constructor","options","super","this","name","input","output","Volume","context","_enabled","volume","_loaded","enabled","samples","loaded","load","thisArg","_arguments","generator","Promise","resolve","_internalLoad","P","reject","fulfilled","step","next","e","rejected","result","done","then","apply","midiToNote","midi","Frequency","toNote","randomBetween","low","high","Math","random","velocitiesMap","allNotes","harmonics","Harmonics","_urls","notes","min","minNote","max","maxNote","filter","note","n","replace","triggerAttack","time","velocity","length","inHarmonicsRange","_sampler","Midi","onload","Sampler","baseUrl","urls","connect","Keybed","i","success","_buffers","ToneAudioBuffers","start","has","ToneBufferSource","url","Pedal","_downTime","Infinity","_currentSound","down1","down2","up1","up2","_squash","state","stop","_playSample","dir","curve","fadeIn","fadeOut","down","up","isDown","PianoString","forEach","vel","attack","release","triggerRelease","PianoStrings","velocities","slice","_strings","map","assign","_activeNotes","Map","scale","val","inMin","inMax","outMin","outMax","scaledVel","stringIndex","round","gain","sampler","set","delete","all","s","Piano","optionsFromArguments","getDefaults","arguments","Gain","_heldNotes","endsWith","maxPolyphony","_sustainedNotes","strings","_pedal","pedal","_keybed","keybed","_harmonics","static","pedalDown","immediate","toSeconds","pedalUp","seconds","t","clear","keyDown","size","isString","toMidi","console","warn","keyUp","prevNote","dampenGain","pow","stopAll","_"],"sourceRoot":""}